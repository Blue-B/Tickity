import os
import sys
import cv2
import numpy as np
from insightface.app import FaceAnalysis
from config import supabase, THRESHOLD

# ‚úÖ ÌòÑÏû¨ ÌååÏùº Í∏∞Ï§ÄÏúºÎ°ú Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º sys.pathÏóê Îì±Î°ù
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from utils.similarity import cosine_similarity

# ‚úÖ Î™®Îç∏ Ï§ÄÎπÑ
app = FaceAnalysis(name="buffalo_l", providers=['CPUExecutionProvider'])
app.prepare(ctx_id=0, det_size=(320, 320))

from postgrest.exceptions import APIError

def fetch_registered_embeddings():
    """
    SupabaseÏóêÏÑú Î™®Îì† user_idÏôÄ embeddingÏùÑ Ï°∞ÌöåÌïòÏó¨ dictÎ°ú Î∞òÌôò
    """
    print("üîÑ SupabaseÏóêÏÑú ÏûÑÎ≤†Îî© Î°úÎî© Ï§ë...")

    try:
        response = supabase.table("face_embeddings").select("user_id, embedding").execute()
        data = response.data
    except APIError as e:
        print("‚ùå Supabase Ï°∞Ìöå Ïã§Ìå®:", e.message)
        return {}

    db = {}
    for item in data:
        user_id = item["user_id"]
        embedding = np.array(item["embedding"])
        db[user_id] = embedding

    print(f"‚úÖ {len(db)}Î™ÖÏùò embedding Î°úÎî© ÏôÑÎ£å")
    return db


def main():
    db_embeddings = fetch_registered_embeddings()
    if not db_embeddings:
        print("‚ùå Îì±Î°ùÎêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÏñºÍµ¥ÏùÑ Îì±Î°ùÌïòÏÑ∏Ïöî.")
        return

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("‚ùå ÏõπÏ∫†ÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.")
        return

    print("üé• Ïã§ÏãúÍ∞Ñ ÏñºÍµ¥ Ïù∏Ï¶ù ÏãúÏûë (ESC: Ï¢ÖÎ£å)")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚ö†Ô∏è ÌîÑÎ†àÏûÑÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            break

        faces = app.get(frame)
        display_frame = frame.copy()

        for face in faces:
            bbox = face.bbox.astype(int)
            live_emb = face.embedding

            best_match = "Unknown"
            best_score = -1

            # ‚úÖ DB embeddingÍ≥º Ïú†ÏÇ¨ÎèÑ ÎπÑÍµê
            for user_id, reg_emb in db_embeddings.items():
                score = cosine_similarity(live_emb, reg_emb)
                if score > best_score:
                    best_score = score
                    best_match = user_id if score > THRESHOLD else "Unknown"

            # ‚úÖ Í≤∞Í≥º ÌôîÎ©¥Ïóê ÌëúÏãú
            cv2.rectangle(display_frame, tuple(bbox[:2]), tuple(bbox[2:]), (0, 255, 0), 2)
            label = f"{best_match} ({best_score:.2f})"
            cv2.putText(display_frame, label, (bbox[0], bbox[1] - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

        cv2.imshow("Live Face Verification", display_frame)
        if cv2.waitKey(1) & 0xFF == 27:
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
